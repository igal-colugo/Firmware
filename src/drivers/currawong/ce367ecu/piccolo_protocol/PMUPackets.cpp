// ECUPackets.c was generated by ProtoGen version 3.2.a

/*
 * Copyright Currawong Engineering Pty Ltd
 * www.currawongeng.com
 * all rights reserved
 */

#include "PMUPackets.hpp"
#include "fielddecode.hpp"
#include "fieldencode.hpp"
#include "scaleddecode.hpp"
#include "scaledencode.hpp"

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_VoltagesPacketStructure(void *_pg_pkt, const PMU_Voltages_t *_pg_user)
{
    uint8_t *_pg_data = getPMUPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    *(_pg_data + _pg_byteindex++) = _pg_user->avionics_output_voltage;
    *(_pg_data + _pg_byteindex++) = _pg_user->vdc_28_output_voltage;
    *(_pg_data + _pg_byteindex++) = _pg_user->payload_output_voltage;
    *(_pg_data + _pg_byteindex++) = _pg_user->servo_output_voltage;
    *(_pg_data + _pg_byteindex++) = _pg_user->battery_A_voltage;
    *(_pg_data + _pg_byteindex++) = _pg_user->battery_B_voltage;
    *(_pg_data + _pg_byteindex++) = _pg_user->generator_voltage;

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_VoltagesPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_VoltagesPacketStructure(const void *_pg_pkt, PMU_Voltages_t *_pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t *_pg_data;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_VoltagesPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_VoltagesMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getPMUPacketDataConst(_pg_pkt);

    //_pg_user->avionics_output_voltage = float32ScaledFrom1UnsignedBytes(_pg_data, &_pg_byteindex, 0.0f, 1.0f/2.55f);
    _pg_user->avionics_output_voltage = *(_pg_data + _pg_byteindex++);
    _pg_user->vdc_28_output_voltage = *(_pg_data + _pg_byteindex++);
    _pg_user->payload_output_voltage = *(_pg_data + _pg_byteindex++);
    _pg_user->servo_output_voltage = *(_pg_data + _pg_byteindex++);
    _pg_user->battery_A_voltage = *(_pg_data + _pg_byteindex++);
    _pg_user->battery_B_voltage = *(_pg_data + _pg_byteindex++);
    _pg_user->generator_voltage = *(_pg_data + _pg_byteindex++);

    return 1;

} // decodeECU_TelemetryFastPacketStructure

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_CurrentsPacketStructure(void *_pg_pkt, const PMU_Currents_t *_pg_user)
{
    uint8_t *_pg_data = getPMUPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    *(_pg_data + _pg_byteindex++) = _pg_user->avionics_output_current;
    *(_pg_data + _pg_byteindex++) = _pg_user->vdc_28_output_current;
    *(_pg_data + _pg_byteindex++) = _pg_user->payload_output_current;
    *(_pg_data + _pg_byteindex++) = _pg_user->servo_output_current;
    *(_pg_data + _pg_byteindex++) = _pg_user->battery_A_current;
    *(_pg_data + _pg_byteindex++) = _pg_user->battery_B_current;

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_CurrentsPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_CurrentsPacketStructure(const void *_pg_pkt, PMU_Currents_t *_pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t *_pg_data;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_CurrentsPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_CurrentsMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getPMUPacketDataConst(_pg_pkt);

    //_pg_user->avionics_output_voltage = float32ScaledFrom1UnsignedBytes(_pg_data, &_pg_byteindex, 0.0f, 1.0f/2.55f);
    _pg_user->avionics_output_current = *(_pg_data + _pg_byteindex++);
    _pg_user->vdc_28_output_current = *(_pg_data + _pg_byteindex++);
    _pg_user->payload_output_current = *(_pg_data + _pg_byteindex++);
    _pg_user->servo_output_current = *(_pg_data + _pg_byteindex++);
    _pg_user->battery_A_current = *(_pg_data + _pg_byteindex++);
    _pg_user->battery_B_current = *(_pg_data + _pg_byteindex++);

    return 1;

} // decodeECU_TelemetryFastPacketStructure

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_BatteryStatusesPacketStructure(void *_pg_pkt, const PMU_BatteryStatuses_t *_pg_user)
{
    uint8_t *_pg_data = getPMUPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    uint16ToBeBytes(_pg_user->battery_A_energy, _pg_data, &_pg_byteindex);
    uint16ToBeBytes(_pg_user->battery_B_energy, _pg_data, &_pg_byteindex);

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_BatteryStatusesPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_BatteryStatusesPacketStructure(const void *_pg_pkt, PMU_BatteryStatuses_t *_pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t *_pg_data;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_BatteryStatusesPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_BatteryStatusesMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getPMUPacketDataConst(_pg_pkt);

    //_pg_user->avionics_output_voltage = float32ScaledFrom1UnsignedBytes(_pg_data, &_pg_byteindex, 0.0f, 1.0f/2.55f);
    _pg_user->battery_A_energy = int16FromBeBytes(_pg_data, &_pg_byteindex);
    _pg_user->battery_B_energy = int16FromBeBytes(_pg_data, &_pg_byteindex);

    return 1;

} // decodeECU_TelemetryFastPacketStructure

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_TemperaturesPacketStructure(void *_pg_pkt, const PMU_Temperatures_t *_pg_user)
{
    uint8_t *_pg_data = getPMUPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    *(_pg_data + _pg_byteindex++) = _pg_user->internal_PMU_temperature;
    *(_pg_data + _pg_byteindex++) = _pg_user->battery_A_temperature;
    *(_pg_data + _pg_byteindex++) = _pg_user->battery_B_temperature;
    *(_pg_data + _pg_byteindex++) = _pg_user->generator_temperature;
    *(_pg_data + _pg_byteindex++) = _pg_user->engine_starter_module_temperature;

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_TemperaturesPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_TemperaturesPacketStructure(const void *_pg_pkt, PMU_Temperatures_t *_pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t *_pg_data;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_TemperaturesPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_TemperaturesMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getPMUPacketDataConst(_pg_pkt);

    //_pg_user->avionics_output_voltage = float32ScaledFrom1UnsignedBytes(_pg_data, &_pg_byteindex, 0.0f, 1.0f/2.55f);
    _pg_user->internal_PMU_temperature = *(_pg_data + _pg_byteindex++);
    _pg_user->battery_A_temperature = *(_pg_data + _pg_byteindex++);
    _pg_user->battery_B_temperature = *(_pg_data + _pg_byteindex++);
    _pg_user->generator_temperature = *(_pg_data + _pg_byteindex++);
    _pg_user->engine_starter_module_temperature = *(_pg_data + _pg_byteindex++);

    return 1;

} // decodeECU_TelemetryFastPacketStructure

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_MiscellaneousPacketStructure(void *_pg_pkt, const PMU_Miscellaneous_t *_pg_user)
{
    uint8_t *_pg_data = getPMUPacketData(_pg_pkt);
    int _pg_byteindex = 0;

    uint16ToBeBytes(_pg_user->generator_speed, _pg_data, &_pg_byteindex);
    *(_pg_data + _pg_byteindex++) = _pg_user->flag_register_0;
    *(_pg_data + _pg_byteindex++) = _pg_user->flag_register_1;
    *(_pg_data + _pg_byteindex++) = _pg_user->flag_register_2;

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_MiscellaneousPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_MiscellaneousPacketStructure(const void *_pg_pkt, PMU_Miscellaneous_t *_pg_user)
{
    int _pg_numbytes;
    int _pg_byteindex = 0;
    const uint8_t *_pg_data;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_MiscellaneousPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_MiscellaneousMinDataLength())
        return 0;

    // The raw data from the packet
    _pg_data = getPMUPacketDataConst(_pg_pkt);

    //_pg_user->avionics_output_voltage = float32ScaledFrom1UnsignedBytes(_pg_data, &_pg_byteindex, 0.0f, 1.0f/2.55f);
    _pg_user->generator_speed = uint16FromBeBytes(_pg_data, &_pg_byteindex);
    _pg_user->flag_register_0 = *(_pg_data + _pg_byteindex++);
    _pg_user->flag_register_1 = *(_pg_data + _pg_byteindex++);
    _pg_user->flag_register_2 = *(_pg_data + _pg_byteindex++);

    return 1;

} // decodeECU_TelemetryFastPacketStructure

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_StartPacketStructure(void *_pg_pkt, const PMU_Start_t *_pg_user)
{
    int _pg_byteindex = 0;

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_StartPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_StartPacketStructure(const void *_pg_pkt, PMU_Start_t *_pg_user)
{
    int _pg_numbytes;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_StartPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_StartMinDataLength())
        return 0;

    return 1;

} // decodeECU_TelemetryFastPacketStructure

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_StopPacketStructure(void *_pg_pkt, const PMU_Stop_t *_pg_user)
{
    int _pg_byteindex = 0;

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_StopPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_StopPacketStructure(const void *_pg_pkt, PMU_Stop_t *_pg_user)
{
    int _pg_numbytes;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_StopPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_StopMinDataLength())
        return 0;

    return 1;

} // decodeECU_TelemetryFastPacketStructure

/*!
 * \brief Create the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet which will be created by this function
 * \param _pg_user points to the user data that will be encoded in _pg_pkt
 */
void encodePMU_ResetPacketStructure(void *_pg_pkt, const PMU_Reset_t *_pg_user)
{
    int _pg_byteindex = 0;

    // complete the process of creating the packet
    finishPMUPacket(_pg_pkt, _pg_byteindex, getPMU_ResetPacketID());

} // encodeECU_TelemetryFastPacketStructure

/*!
 * \brief Decode the ECU_TelemetryFast packet
 *
 * Fast telemetry contains high priority telemetry data and is transmitted at a
 * user configurable period between 50ms (20Hz) and 10s. By default, the fast
 * telemetry message is transmitted at 10Hz (every 100ms)
 * \param _pg_pkt points to the packet being decoded by this function
 * \param _pg_user receives the data decoded from the packet
 * \return 0 is returned if the packet ID or size is wrong, else 1
 */
int decodePMU_ResetPacketStructure(const void *_pg_pkt, PMU_Reset_t *_pg_user)
{
    int _pg_numbytes;

    // Verify the packet identifier
    if (getPMUPacketID(_pg_pkt) != getPMU_ResetPacketID())
        return 0;

    // Verify the packet size
    _pg_numbytes = getPMUPacketSize(_pg_pkt);
    if (_pg_numbytes < getPMU_ResetMinDataLength())
        return 0;

    return 1;

} // decodeECU_TelemetryFastPacketStructure

// end of ECUPackets.c
