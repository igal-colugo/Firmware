// ECUPackets.h was generated by ProtoGen version 3.2.a

/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Author: Oliver Walters / Currawong Engineering Pty Ltd
 */

#ifndef _PMUPACKETS_H
#define _PMUPACKETS_H

// Language target is C, C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C"
{
#endif

    /*!
     * \file
     */

#include "PMUDefines.hpp"
#include "PMUProtocol.hpp"
#include "PMUSettings.hpp"
#include <stdbool.h>

#pragma region  Currawong PMU packets
    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        uint8_t avionics_output_voltage; //!< An unsigned byte with value 10 times the measured voltage (i.e. in 0.1V increments).Value ranges from 0 to 250 (0.0 to 25.0V).
        uint8_t vdc_28_output_voltage;   //!< An unsigned byte with value 5 times the measured voltage(i.e.in 0.2V increments).Value ranges from 0 to 250 (0.0 to 50.0V).
        uint8_t payload_output_voltage;  //!< An unsigned byte with value 10 times the measured voltage (i.e. in 0.1V increments).Value ranges from 0 to 250 (0.0 to 25.0V).
        uint8_t servo_output_voltage;    //!< An unsigned byte with value 10 times the measured voltage (i.e. in 0.1V increments).Value ranges from 0 to 125 (0.0 to 12.5V).
        uint8_t battery_A_voltage;       //!< An unsigned byte with value 10 times the measured voltage (i.e. in 0.1V increments).Value ranges from 0 to 250 (0.0 to 25.0V).
        uint8_t battery_B_voltage;       //!< An unsigned byte with value 10 times the measured voltage (i.e. in 0.1V increments).Value ranges from 0 to 250 (0.0 to 25.0V).
        uint8_t generator_voltage;       //!< An unsigned byte with value 2.5 times the measured voltage (i.e. in 0.4V increments).Value ranges from 0 to 250 (0.0 to 100.0V).
    } PMU_Voltages_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_VoltagesPacketStructure(void *pkt, const PMU_Voltages_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_VoltagesPacketStructure(const void *pkt, PMU_Voltages_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_VoltagesPacketID() (PKT_PMU_VOLTAGES)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_VoltagesMinDataLength() (7)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_VoltagesMaxDataLength() (7)

    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        uint8_t avionics_output_current; //!< An unsigned byte with value 10 times the measured current (i.e. in 0.1A increments).Value ranges from 0 to 100 (0.0 to 10.0A).
        uint8_t vdc_28_output_current;   //!< A signed byte with value 10 times the measured current (i.e. in 0.1A increments).Value ranges from -125 to +125 (-12.5 to +12.5A).
        uint8_t payload_output_current;  //!< An unsigned byte with value 10 times the measured current (i.e. in 0.1A increments).Value ranges from 0 to 100 (0.0 to 10.0A).
        uint8_t servo_output_current;    //!< An unsigned byte with value 10 times the measured current (i.e. in 0.1A increments).Value ranges from 0 to 100 (0.0 to 10.0A).
        uint8_t battery_A_current;       //!< A signed byte with value 10 times the measured current (i.e. in 0.1A increments).Value ranges from –125 to +125 (-12.5 to +12.5A).
        uint8_t battery_B_current;       //!< A signed byte with value 10 times the measured current (i.e. in 0.1A increments).Value ranges from –125 to +125 (-12.5 to +12.5A).
    } PMU_Currents_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_CurrentsPacketStructure(void *pkt, const PMU_Currents_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_CurrentsPacketStructure(const void *pkt, PMU_Currents_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_CurrentsPacketID() (PKT_PMU_CURRENTS)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_CurrentsMinDataLength() (6)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_CurrentsMaxDataLength() (6)

    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        int16_t battery_A_energy; //!< A signed integer with value equal to the time-integral of current into battery A since power up in mAH.Value ranges from –32768 to +32767.
        int16_t battery_B_energy; //!< A signed integer with value equal to the time-integral of current into battery B since power - up in mAH.Value ranges from –32768 to + 32767.
    } PMU_BatteryStatuses_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_BatteryStatusesPacketStructure(void *pkt, const PMU_BatteryStatuses_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_BatteryStatusesPacketStructure(const void *pkt, PMU_BatteryStatuses_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_BatteryStatusesPacketID() (PKT_PMU_BATTERY_STATUSES)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_BatteryStatusesMinDataLength() (4)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_BatteryStatusesMaxDataLength() (4)

    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        int8_t internal_PMU_temperature; //!< A signed byte with value equal to the temperature inside the PMU in degrees Celsius.Value ranges from –128 to +127.
        int8_t battery_A_temperature;    //!< A signed byte with value equal to the temperature of battery A in degrees Celsius.Value ranges from –128 to +127(–128 = no sensor).
        int8_t battery_B_temperature;    //!< A signed byte with value equal to the temperature of battery B in degrees Celsius.Value ranges from - 128 to +127(–128 = no sensor).
        int8_t
            generator_temperature; //!< A signed byte with value equal to the temperature of the generator(BLDC motor) in degrees Celsius.Value ranges from - 128 to +127(–128 = no sensor).
        int8_t engine_starter_module_temperature; //!< A signed byte with value equal to the temperature of the engine starter module in degrees Celsius.Value ranges from - 49 to + 127.
    } PMU_Temperatures_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_TemperaturesPacketStructure(void *pkt, const PMU_Temperatures_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_TemperaturesPacketStructure(const void *pkt, PMU_Temperatures_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_TemperaturesPacketID() (PKT_PMU_TEMPERATURES)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_TemperaturesMinDataLength() (5)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_TemperaturesMaxDataLength() (5)

    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        uint16_t generator_speed; //!< An unsigned integer with value equal to the generator speed in RPM.Value ranges from 0 to 65535.
        uint8_t flag_register_0;  //!<
        uint8_t flag_register_1;  //!<
        uint8_t flag_register_2;  //!<
    } PMU_Miscellaneous_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_MiscellaneousPacketStructure(void *pkt, const PMU_Miscellaneous_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_MiscellaneousPacketStructure(const void *pkt, PMU_Miscellaneous_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_MiscellaneousPacketID() (PKT_PMU_MISCELLANEOUS)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_MiscellaneousMinDataLength() (5)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_MiscellaneousMaxDataLength() (5)

    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        uint8_t reserve;
    } PMU_Start_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_StartPacketStructure(void *pkt, const PMU_Start_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_StartPacketStructure(const void *pkt, PMU_Start_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_StartPacketID() (PKT_PMU_START)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_StartMinDataLength() (0)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_StartMaxDataLength() (0)

    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        uint8_t reserve;
    } PMU_Stop_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_StopPacketStructure(void *pkt, const PMU_Stop_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_StopPacketStructure(const void *pkt, PMU_Stop_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_StopPacketID() (PKT_PMU_STOP)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_StopMinDataLength() (0)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_StopMaxDataLength() (0)

    /*!
     * Fast telemetry contains high priority telemetry data and is transmitted at a
     * user configurable period between 50ms (20Hz) and 10s. By default, the fast
     * telemetry message is transmitted at 10Hz (every 100ms)
     */
    typedef struct
    {
        uint8_t reserve;
    } PMU_Reset_t;

    //! Create the ECU_TelemetryFast packet
    void encodePMU_ResetPacketStructure(void *pkt, const PMU_Reset_t *user);

    //! Decode the ECU_TelemetryFast packet
    int decodePMU_ResetPacketStructure(const void *pkt, PMU_Reset_t *user);

//! return the packet ID for the ECU_TelemetryFast packet
#define getPMU_ResetPacketID() (PKT_PMU_RESET)

//! return the minimum encoded length for the ECU_TelemetryFast packet
#define getPMU_ResetMinDataLength() (0)

//! return the maximum encoded length for the ECU_TelemetryFast packet
#define getPMU_ResetMaxDataLength() (0)

#pragma endregion Currawong packets

#ifdef __cplusplus
}
#endif
#endif // _PMUPACKETS_H
